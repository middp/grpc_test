// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/writeSomething.proto

// protoc --go_out=plugins=grpc:. ./proto/writeSomething.proto

package writeSomething

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WriteRequest struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteRequest) Reset()         { *m = WriteRequest{} }
func (m *WriteRequest) String() string { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()    {}
func (*WriteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b70e9791ac211131, []int{0}
}

func (m *WriteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteRequest.Unmarshal(m, b)
}
func (m *WriteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteRequest.Marshal(b, m, deterministic)
}
func (m *WriteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteRequest.Merge(m, src)
}
func (m *WriteRequest) XXX_Size() int {
	return xxx_messageInfo_WriteRequest.Size(m)
}
func (m *WriteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteRequest proto.InternalMessageInfo

func (m *WriteRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type WriteResult struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteResult) Reset()         { *m = WriteResult{} }
func (m *WriteResult) String() string { return proto.CompactTextString(m) }
func (*WriteResult) ProtoMessage()    {}
func (*WriteResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b70e9791ac211131, []int{1}
}

func (m *WriteResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteResult.Unmarshal(m, b)
}
func (m *WriteResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteResult.Marshal(b, m, deterministic)
}
func (m *WriteResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteResult.Merge(m, src)
}
func (m *WriteResult) XXX_Size() int {
	return xxx_messageInfo_WriteResult.Size(m)
}
func (m *WriteResult) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteResult.DiscardUnknown(m)
}

var xxx_messageInfo_WriteResult proto.InternalMessageInfo

func (m *WriteResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterType((*WriteRequest)(nil), "writeSomething.WriteRequest")
	proto.RegisterType((*WriteResult)(nil), "writeSomething.WriteResult")
}

func init() { proto.RegisterFile("proto/writeSomething.proto", fileDescriptor_b70e9791ac211131) }

var fileDescriptor_b70e9791ac211131 = []byte{
	// 143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x2f, 0xca, 0x2c, 0x49, 0x0d, 0xce, 0xcf, 0x4d, 0x2d, 0xc9, 0xc8, 0xcc, 0x4b,
	0xd7, 0x03, 0x0b, 0x0a, 0xf1, 0xa1, 0x8a, 0x2a, 0x69, 0x70, 0xf1, 0x84, 0x83, 0x44, 0x82, 0x52,
	0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x24, 0xb8, 0xd8, 0x93, 0xf3, 0xf3, 0x4a, 0x52, 0xf3, 0x4a,
	0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x25, 0x55, 0x2e, 0x6e, 0xa8, 0xca, 0xe2,
	0xd2, 0x9c, 0x12, 0x21, 0x31, 0x2e, 0xb6, 0x22, 0x30, 0x0b, 0xac, 0x8e, 0x23, 0x08, 0xca, 0x33,
	0x0a, 0xe3, 0x62, 0x05, 0x2b, 0x13, 0xf2, 0xe5, 0xe2, 0x0b, 0x47, 0xb1, 0x4b, 0x48, 0x46, 0x0f,
	0xcd, 0x49, 0xc8, 0x36, 0x4b, 0x49, 0xe3, 0x90, 0x05, 0x99, 0xaa, 0xc4, 0x90, 0xc4, 0x06, 0x76,
	0xbf, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x21, 0x9d, 0x34, 0xdd, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WriteClient is the client API for Write service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WriteClient interface {
	WriteSomething(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResult, error)
}

type writeClient struct {
	cc *grpc.ClientConn
}

func NewWriteClient(cc *grpc.ClientConn) WriteClient {
	return &writeClient{cc}
}

func (c *writeClient) WriteSomething(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResult, error) {
	out := new(WriteResult)
	err := c.cc.Invoke(ctx, "/writeSomething.Write/WriteSomething", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WriteServer is the server API for Write service.
type WriteServer interface {
	WriteSomething(context.Context, *WriteRequest) (*WriteResult, error)
}

func RegisterWriteServer(s *grpc.Server, srv WriteServer) {
	s.RegisterService(&_Write_serviceDesc, srv)
}

func _Write_WriteSomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriteServer).WriteSomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/writeSomething.Write/WriteSomething",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriteServer).WriteSomething(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Write_serviceDesc = grpc.ServiceDesc{
	ServiceName: "writeSomething.Write",
	HandlerType: (*WriteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteSomething",
			Handler:    _Write_WriteSomething_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/writeSomething.proto",
}
